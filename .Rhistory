head(shuttle)
library(MASS)
head(shuttle)
names(shuttle)
glm(use ~ wind, data=shuttle)
glm(use ~ wind, data=shuttle, family="Binomial")
glm(use ~ wind, data=shuttle, family="binomial")
exp(-.031)
head(InsectSpray)
head(InsectSprays)
sprayA <- InsectSprays$spray[InsectSprays$spray == "A"]
head(sprayA)
sprayA <- InsectSprays$count[InsectSprays$spray == "A"]
sprayA
sprayB <- InsectSprays$count[InsectSprays$spray == "B"]
index(InsectSprays)
InsectSprays$index
glm(sprayA ~ 1:12,offset=log(sprayB))
count <- 1:12
glm(sprayA ~ count,offset=log(sprayB))
exp(0.4862)
exp(8.6524)
glm(sprayA ~ count,offset=log(sprayB), family ="poisson")
exp(0.04174)
exp(-.33415)
exp(0.04174)*exp(-.33415)
1-exp(0.04174)*exp(-.33415)
1-exp(-.33415)
1-exp(0.04174)
knots <- seq(0,8*pi,length = 20)
splineTerms <- sapply(knots, function(knot) (x > knot)*(x - knot))
x <- seq(0,4*pi, length = 500)
splineTerms <- sapply(knots, function(knot) (x > knot)*(x - knot))
head(splineTerms)
head(splineTerms,19:30)
head(splineTerms,30)
tail(splineTerms)
xMat <- cbind(1,x,splineTerms)
head(xMat)
tail(xMat)
x <- -5:5
y <- c(5.12,3.93,2.67,1.87,0.52,0.08,0.93,2.05,2.54,3.87,4.97)
plot(x,y)
z <- y[5:10]
z <- y[6:10]
z
z <- c(y[1:5],y[6:10] - z)
z
rep(0,5)
z <- c(rep(0,5),1:5)
xMat <- cbind(1,x,z)
z <- c(rep(0,6),1:5)
xMat <- cbind(1,x,z)
xMat
yhat <- predict(lm(y ~ xMat - 1))
lines(x,yhat,col="red")
lm(y ~ xMat - 1)
.99/(.99+1-.001)
1-.001
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentarionOriginal)
head(segmentationOriginal)
training <- segmentationOriginal[inTrain,]
training <- segmentationOriginal[Train,]
training <- segmentationOriginal[segmentationOriginal$Case ==Train,]
training <- segmentationOriginal[segmentationOriginal$Case =="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case =="Test",]
set.seed(125)
fit <- train(Species ~ .,method="rpart",data=training)
fit <- train(Class ~ .,method="rpart",data=training)
p <- as.data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
p <- as.data.frame(x = c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
head(p)
ncol(p)
p <- as.data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
p <- data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
head(p)
predict(fit,p)
b <- data.frame(TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100)
b <- data.frame(TotalIntench2 = 50000, FiberWidthCh1 = 10,VarIntenCh4 = 100)
predict(fit,b)
plot(fit$finalModel, uniform=TRUE)
text(fit$finalModel,use.n=T,all=T,cex=.8)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(fit$finalModel)
?fancyRpartPlot
fancyRpartPlot(fit$finalModel)
fit$finalModel
modFit <- fit
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(fit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
data(olive)
head(olive)
olive = olive[,-1]
fit <- train(Area ~ .,method="rpart",data=olive)
predict(fit,newdata = as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
fit <- train(chd ~ ., method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,fit)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,fit)
class(trainSA)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit <- train(y ~.,method="rf",data=vowel.train,prox=T)
varlmp(fit)
fit$varlmp
library(manipulate)
manipulate(plot(1:x), x = slider(1,100))
manipulate(plot(x:x), x = slider(1,100))
manipulate(plot(x,x), x = slider(1,100))
manipulate(plot(1:x), x = slider(1,100))
shiny::runApp('DATA SCIENCE/Shiny')
shiny::runApp('DATA SCIENCE/Shiny')
shiny::runApp('DATA SCIENCE/Shiny')
shiny::runApp('DATA SCIENCE/Shiny')
shiny::runApp('DATA SCIENCE/Shiny')
library(shiny)
setwd("~/DATA SCIENCE/Shiny")
shiny::runApp()
setwd("~/DATA SCIENCE/Shiny2")
shiny::runApp()
shiny::runApp()
head(mtcars)
variable <- "hp"
paste("mpg",variable,sep="~")
paste("mpg",variable,sep=" ~ ")
paste("mpg",variable,sep=" ~ ")
?lm
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
var <- "hp"
fit <- lm(mpg ~ var, data = mtcars)
fit <- lm(mpg ~ hp, data = mtcars)
shiny::runApp('~/DATA SCIENCE/Shiny3')
fit <- lm(mpg ~ hp, data = mtcars)
plot(fit)
plot(mtcars$mpg ~ mtcars$hp)
abline(fit)
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny')
shiny::runApp()
fit
predict(fit,10)
?predict
predict(10,fit)
library(caret)
predict(10,fit)
predict(10,fit)
predict(fit,newdata=10)
predict(fit,newdata=10, interval="predict")
fit
shiny::runApp('~/DATA SCIENCE/Shiny3')
?point
?points
fit
predict(fit,10)
predict(10,fit)
x <- 10
predict(x,fit)
predict(hp=10,fit)
hp <- 10
predict(hp,fit)
predict(fit,hp)
hp <- as.data.frame(hp)
hp
predict(fit,hp)
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
x <- data.frame(disp = 5)
x
prediction <- predict(fit,x)
x <- data.frame(hp = input$obs)
x <- data.frame(hp = 10)
prediction <- predict(fit,x)
x
prediction
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
x <- data.frame(disp = 0)
x
prediction <- predict(fit,x)
x <- data.frame(hp = 0)
x
prediction <- predict(fit,x)
prediction
prediction[1]
prediction[1,1]
p <- as.numeric(prediction)
p
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
?plot
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
names <- names(mtcars)
names
names[c(3,4,6)] <- c("Displacement","Horse.Power","Weight")
names
names(mtcars)[c(3,4,6)] <- c("Displacement","Horse.Power","Weight")
head(mtcars)
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
points?
?
''
?points
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
paste("a","b","c")
shiny::runApp('~/DATA SCIENCE/Shiny3')
?plot
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
row.names(mtcars)
plot(mpg ~ Displacement,data = mtcars, ylab="Miles per Gallon",xlab="Displacemente")
plot(mpg ~ Displacement,data = mtcars, ylab="Miles per Gallon",xlab="Displacement")
text(mpg ~ Displacement, labels = row.names(mtcars), pos = 4))
text(mpg ~ Displacement, labels = row.names(mtcars), pos = 4)
text(mpg ~ Displacement, labels = row.names(mtcars))
head(mtcars)
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
?text
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp()
shiny::runApp('~/DATA SCIENCE/Shiny')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
head(mtcars)
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
?data.frame
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
swirl()
library(swirl)
swirl()
info()
main()
cor
main()
fit <- lm(child ~ parent)
fit <- lm(child ~ parent,dataset=galton)
fit <- lm(child ~ parent,data=galton)
fit <- lm(child ~ parent,galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals,
| galton$parent)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
fit$coef[2]
ols.slope <- fit$coef[2]
a
a
lhs-rhs
all.equal
all.equal(lhs,rhs)
a
varChild <- var(galton$child)
a
varRes <- var(fit$residuals)
a
varEst <- var(est(ols.slope, ols.ic))
all
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
a
mean(efit$residuals)
a
cov(efit$residuals, attenu$mag)
a
cov(efit$residuals, attenu$dist)
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <-
| lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
a
summary(regrline)
a
fit <- lm(child ~ parent, galton)
a
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
a
sqrt(deviance(fit)/(n-2))
a
mu <- mean(galton$child)
a
sTot <- sum((galton$child-mu)^2)
a
sRes <- deviance(fit)
a
1-sRes/sTot
a
summary(fit)$r.squared
a
cor(galton$parent,galton$child)^2
a
cor(gpa_nor,gch_nor)
a
l_nor <- lm(gch_nor ~ gpa_nor)
fit
head(mtcars)
fit <- lm(mpg ~ Displacement,mtcars)
inter <- predict(fit,interval="confidence")
plot(mpg ~ Displacement,mtcars)
lines(Displacement,inter[,2],mtcars)
lines(Displacement,inter[,2],data=mtcars)
ablines(Displacement,inter[,2],data=mtcars)
abline(Displacement,inter[,2],data=mtcars)
abline(mtcars$Displacement,inter[,2])
lines(mtcars$Displacement,inter[,2])
abline(fit)
plot(mpg ~ Displacement,mtcars)
abline(fit)
lines(100:450,inter[,2])
shiny::runApp('~/DATA SCIENCE/Shiny3')
nrow(inter)
?seq
plot(mpg ~ Displacement,mtcars)
lines(mtcars$Displacement,inter[,2])
plot(mpg ~ Displacement,mtcars)
lines(mtcars$Displacement,inter[,2],lty=2)
shiny::runApp('~/DATA SCIENCE/Shiny3')
fit
names(fit)
fit$coefficients
fit$coefficients[1]
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
?round
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
shiny::runApp('~/DATA SCIENCE/Shiny3')
library(slidify)
setwd("~/DATA SCIENCE/slidify")
setwd("~/DATA SCIENCE/data_product")
author("Linear Regression App Tutorial")
---
''
))
runDeck()
runDeck()
install.packages("XML")
runDeck()
runDeck()
runDeck()
runDeck()
install_github("slidify","ramnathv")
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
runDeck()
install.packages("XML")
